---
title: "Journal Entry"
author: "Brad Venner"
date: "03/04/2023"
output: html_document
---

# Socialist accounting and social accountability

Ijiri analyzes the accountability relationship as a balance between the privacy needs of the accountor and the transparancy needs of the accountee. The accountant plays a similar role to a legal mediator. They can have "private conversations" with both parties and then assert that the public disclosure is consistent with the agreed-upon accountability relationship between the accountor and accountee. This mediation role is necessarily a trusted one.

# Paradigms of composition for accounting

Myer develops three "paradigms of composition" for categorical systems theory. Does accounting fit one of these paradigms? In particular, how does Ijiri's analogy between accounting systems and classical mechanics in his "momentum accounting" fit in? Since physical systems seem to fit the "variable-sharing" paradigm more than the "parameter-setting" paradigm.

A deeper question is whether the "parameter-setting" paradigm is always equivalent to state-based approaches. Myer's includes Markov decision processes under the parameter-setting paradigm. But temporal type theory is included under the "variable-sharing" paradigm. The behavioral approach to systems also seems to be included in the "variable-sharing" paradigm.

# Object-oriented programming and capitalism

Brian Will's YouTube video [*Object-oriented programming is bad*](https://www.youtube.com/watch?v=QM1iUe6IofM) makes the case for why object-oriented programming is a bad paradigm for programming. He asks why such an obviously flawed system became popular. Will outlines how object references consistently break the "encapsulated data" model and that the only way to program in a "true" OO style without object references is to develop a hierarchy. Nodes higher in the hierarchy contain a reference to sub-nodes. 

But this pattern exactly resembles capitalism. By dividing resources as "private property", the only consistent way to honor these relationships is to develop a hierarchical structure. Communication between objects must proceed up and down the hierarchy.

Mainstream OO languages break this notion by allowing for passing of object references, which allows for shared mutable state. "Pure" OO languages, such as Smalltalk or Erlang, allow for message passing, as immutable data structures, between processes that have exclusive access to state. Would Will's analysis apply to a language like Erlang?  

# Peirce's Interpretant

*Peirce's Interpetant* is a paper by Jakob Liszka[@liszka:1990:peirce] that I found when searching for Peirce's example of an interpretant being similar to the role played by an interpeter. I still haven't found this reference, and may be mis-remembering. But the basic notion is that an interpretant is a rule of translation. This struck me as similar to the role that Ijiri gives to the accountant, mediating between the need for privacy of the accountor and the need for transparancy by the accountee. This seems particularly important for socialism, where social relations have to be based in some notion of mutual accountability.

Liska's article first develops the notion of the interpretant as translation, and then as inference, with inference being a special notion of translation. Liszka uses early Peirce to discuss the notion of information. 

> Thus the interpretant is a rule of translation or inference (p. 34)

> According to Peirce, the object of every sign is an individual (u.d: 8.181), (p. 39)

